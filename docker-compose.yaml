version: "3.8"

name: translator

services:

  # Transcription Service
  transcription:
    container_name: transcription
    hostname: transcription
    networks:
      - translator-backnet
    build:
      context: ./transcription
      dockerfile: Dockerfile
    image: translator-transcription
    restart: on-failure
    depends_on:
      transcription-redis:
        condition: service_healthy
      transcription-rabbitmq:
        condition: service_healthy
      translation:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:2700/healthcheck || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 2
      start_period: 2m
      start_interval: 5s
    environment:
      - TRANSCRIPTION_DEBUGMODE=True
      - TRANSLATION_HOST=translation
      - TRANSLATION_PORT=5000
      - RABBITMQ_HOST=transcription-rabbitmq
      - RABBITMQ_PORT=5672
      - REDIS_HOST=transcription-redis
      - REDIS_PORT=6379
      - USER_SERVICE_HOST=user-service
      - USER_SERVICE_PORT=8080
      - TRANSCRIPTION_PORT=2700
      - VOSK_MODEL_PATHS={"en":"models/vosk-model-en-us-0.22","de":"models/vosk-model-de-0.21"}

  # Redis for joinids from Transcription Service
  transcription-redis:
    container_name: transcription-redis
    hostname: transcription-redis
    networks:
      - translator-backnet
    image: redis
    restart: on-failure
    volumes:
      - transcription-redis:/data
    command: [sh, -c, "rm -f /data/dump.rdb && redis-server"]
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 5s
      retries: 2
      start_period: 1m
      start_interval: 5s

  # Libretranslate
  translation:
    container_name: translation
    hostname: translation
    networks:
      - translator-backnet
    build:
      context: ./translation
      dockerfile: Dockerfile
    image: translator-translation
    restart: on-failure
    volumes:
      - translation:/data
    healthcheck:
      test: ["CMD-SHELL", "./venv/bin/python scripts/healthcheck.py"]
      interval: 30s
      timeout: 5s
      retries: 2
      start_period: 1m
      start_interval: 5s
    environment:
      - LT_DISABLE_FILES_TRANSLATION=true
      - LT_DISABLE_WEB_UI=true
      - LT_UPDATE_MODELS=true
      - LT_HOST=0.0.0.0
      - LT_LOAD_ONLY=en,de
      - LT_DEBUG=false

  # RabbitMQ for Transcription to TextServiceLeader
  transcription-rabbitmq:
    container_name: transcription-rabbitmq
    hostname: transcription-rabbitmq
    networks:
      - translator-backnet
    image: rabbitmq:management
    restart: on-failure
    volumes:
      - transcription-rabbitmq:/var/lib/rabbitmq
      - ./init/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./init/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 1m
      start_interval: 5s

  # UserServiceDB
  user-service-db:
    container_name: user-service-db
    hostname: user-service-db
    networks:
      - translator-backnet
    image: postgres:16.1
    restart: on-failure
    volumes:
      - userservice-db:/var/lib/postgresql/data
      - ./init/UserDB/00-init.sql:/docker-entrypoint-initdb.d/00-init.sql:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: userdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

  # UserService
  user-service:
    container_name: user-service
    hostname: user-service
    networks:
      - translator-backnet
    build:
      context: ./Database/UserService
      dockerfile: Dockerfile
    image: translator-user-service
    restart: on-failure
    depends_on:
      user-service-db:
        condition: service_healthy

  # TextServiceDB Leader
  text-db-leader:
    container_name: text-db-leader
    hostname: text-db-leader
    networks:
      - translator-backnet
    image: postgres:16.1
    restart: on-failure
    volumes:
      - text-db-leader:/var/lib/postgresql/data
      - ./init/TextDBLeader/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./init/TextDBLeader/leader_init.sh:/docker-entrypoint-initdb.d/leader_init.sh
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: textdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGPORT: 6543

  # TextServiceDB Follower
  text-db-follower:
    container_name: text-db-follower
    hostname: text-db-follower
    networks:
      - translator-backnet
    image: postgres:16.1
    restart: on-failure
    volumes:
      - text-db-follower:/var/lib/postgresql/data
      - ./init/TextDBFollower/pg_hba.conf:/tmp/pg_hba.conf:ro
      - ./init/TextDBFollower/postgresql.conf:/tmp/postgresql.conf:ro
      - ./init/TextDBFollower/follower_init.sh:/docker-entrypoint-initdb.d/follower_init.sh
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      text-db-leader:
        condition: service_healthy
    environment:
      POSTGRES_DB: tmp
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGPORT: 6544


  # TextServiceLeader
  text-service-leader:
    container_name: text-service-leader
    hostname: text-service-leader
    networks:
      - translator-backnet
    build:
      context: ./Database/TextServiceLeader
      dockerfile: Dockerfile
    image: translator-text-service-leader
    restart: on-failure
    depends_on:
      text-db-leader:
        condition: service_healthy

  # TextServiceFollower
  text-service-follower:
    container_name: text-service-follower
    hostname: text-service-follower
    networks:
      - translator-backnet
    build:
      context: ./Database/TextServiceFollower
      dockerfile: Dockerfile
    image: translator-text-service-follower
    restart: on-failure
    depends_on:
      text-db-follower:
        condition: service_healthy


  # Angular Frontend
  angular-application:
    container_name: angular-application
    hostname: angular-application
    networks:
      - translator-frontnet
    build:
      context: ./angular/translator
      dockerfile: Dockerfile
    image: angular-application
    restart: on-failure


  # API Gateway
  api-gateway:
    container_name: api-gateway
    hostname: api-gateway
    networks:
      - translator-frontnet
      - translator-backnet
    build:
      context: ./APIGateway
      dockerfile: Dockerfile
    image: translator-api-gateway
    ports:
      - "8080:8080"
    restart: on-failure
    depends_on:
      text-service-follower:
        condition: service_started
      angular-application:
        condition: service_started
      transcription:
        condition: service_healthy
      user-service:
        condition: service_started


volumes:
  transcription-redis:
  transcription-rabbitmq:
  translation:
  text-db-follower:
  text-db-leader:
  userservice-db:

networks:
  translator-frontnet:
  translator-backnet:




