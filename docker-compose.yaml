version: "3.8"



services:
  transcription:
    container_name: transcription
    hostname: transcription
    networks:
      - backnet
    build:
      context: ./transcription
      dockerfile: Dockerfile
    image: translator-transcription
    ports:
      - "2700:2700"
    depends_on:
      transcription_redis:
        condition: service_healthy
      translation:
        condition: service_healthy
    restart: on-failure
    environment:
      - TRANSCRIPTION_DEBUGMODE=True
      - TRANSLATION_HOST=translation
      - TRANSLATION_PORT=5000
      - REDIS_HOST=transcription_redis
      - REDIS_PORT=6379
      - TRANSCRIPTION_PORT=2700
      - VOSK_MODEL_PATHS={"en":"models/vosk-model-en-us-0.22","de":"models/vosk-model-de-0.21"}
  
  transcription_redis:
    container_name: transcription_redis
    hostname: transcription_redis
    networks:
      - backnet
    image: redis
    ports:
      - "6379:6379"
    restart: on-failure
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 60s
      timeout: 5s
      retries: 2
      start_period: 1m
      start_interval: 5s
    volumes:
      - transcription_db:/data

  translation:
    container_name: translation
    hostname: translation
    networks:
      - backnet
    build:
      context: ./translation
      dockerfile: Dockerfile
    image: translator-translation
    ports:
      - "5000:5000"
    restart: on-failure
    healthcheck:
      test: ["CMD-SHELL", "./venv/bin/python scripts/healthcheck.py"]
      interval: 5s
      timeout: 5s
      retries: 2
      start_period: 1m
      start_interval: 5s
    environment:
      - LT_DISABLE_FILES_TRANSLATION=true
      - LT_DISABLE_WEB_UI=true
      - LT_UPDATE_MODELS=true
      - LT_HOST=0.0.0.0
      - LT_LOAD_ONLY=en,de
      - LT_DEBUG=false
    #  - TRANSCRIPTION_DEBUGMODE=False
    
  # UserServiceDB
  user_service_db:
    build:
      context: ./Database/Dockerimages/UserDBImage
      dockerfile: Dockerfile
    container_name: UserServiceDB
    networks:
      - UserServiceNetwork
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # UserService
  user_service:
    build:
      context: ./Database/UserService
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    container_name: UserService
    networks:
      - UserServiceNetwork
    depends_on:
      user_service_db:
        condition: service_healthy

  # TextServiceDB Leader
  text_service_db_leader:
    build:
      context: ./Database/Dockerimages/TextDBImage/Leader
      dockerfile: Leader.Dockerfile
    container_name: TextServiceDBLeader
    networks:
      - TextServiceNetwork
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # TextServiceDB Follower
  text_service_db_follower:
    build:
      context: ./Database/Dockerimages/TextDBImage/Follower
      dockerfile: Follower.Dockerfile
    container_name: TextServiceDBFollower
    networks:
      - TextServiceNetwork
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      text_service_db_leader:
        condition: service_healthy

  # TextService
  text_service:
    build:
      context: ./Database/TextService
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    container_name: TextService
    networks:
      - TextServiceNetwork
    depends_on:
      text_service_db_follower:
        condition: service_healthy
    
  angular-application:
    container_name: angular-application
    hostname: angular-application
    networks:
      - backnet
      - TextServiceNetwork
      - UserServiceNetwork
    build:
      context: ./angular/translator
      dockerfile: Dockerfile
    image: angular-application
    ports:
      - "9090:80"
    restart: on-failure

volumes:
  transcription_db:
    name: translator_transcription_db


networks:
  backnet:
    name: backnet
  UserServiceNetwork:
    driver: bridge
  TextServiceNetwork:
    driver: bridge



